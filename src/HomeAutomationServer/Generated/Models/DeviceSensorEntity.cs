// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace HomeAutomationClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DeviceSensorEntity
    {
        /// <summary>
        /// Initializes a new instance of the DeviceSensorEntity class.
        /// </summary>
        public DeviceSensorEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceSensorEntity class.
        /// </summary>
        public DeviceSensorEntity(int deviceId, int sensorTypeId, DeviceEntity device = default(DeviceEntity), SensorEntity sensorType = default(SensorEntity), int? id = default(int?))
        {
            DeviceId = deviceId;
            Device = device;
            SensorTypeId = sensorTypeId;
            SensorType = sensorType;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceId")]
        public int DeviceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "device")]
        public DeviceEntity Device { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sensorTypeId")]
        public int SensorTypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sensorType")]
        public SensorEntity SensorType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Device != null)
            {
                Device.Validate();
            }
            if (SensorType != null)
            {
                SensorType.Validate();
            }
        }
    }
}
